/*******************************************************************************
 * Copyright 2013-2018 QaProSoft (http://www.qaprosoft.com).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
package com.qaprosoft.zafira.dbaccess.dao;

import com.qaprosoft.zafira.dbaccess.dao.mysql.application.WidgetMapper;
import com.qaprosoft.zafira.models.db.Widget;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.testng.AbstractTestNGSpringContextTests;
import org.testng.annotations.Test;
import static org.testng.Assert.*;

@Test
@ContextConfiguration("classpath:com/qaprosoft/zafira/dbaccess/dbaccess-test.xml")
public class WidgetMapperTest extends AbstractTestNGSpringContextTests
{
	@Autowired
	private WidgetMapper widgetMapper;
	
	/**
	 * Turn this on to enable this test
	 */
	private static final boolean ENABLED = false;
	
	private static final Widget WIDGET = new Widget()
	{
		private static final long serialVersionUID = 1L;
		{
			setModel("m1");
			setSql("s1");
			setTitle("t1");
            setType("wt1");
		}
	};
	
	@Test(enabled = ENABLED)
	public void createWidget()
	{
		widgetMapper.createWidget(WIDGET);
		assertNotEquals(WIDGET.getId(), 0, "Widget ID must be set up by autogenerated keys");
	}
	
	@Test(enabled = ENABLED, dependsOnMethods = {"createWidget"})
	public void getWidgetById()
	{
		checkWidget(widgetMapper.getWidgetById(WIDGET.getId()));
	}
	
	@Test(enabled = ENABLED, dependsOnMethods = {"createWidget"})
	public void getAllWidgets()
	{
		checkWidget(widgetMapper.getAllWidgets().get(0));
	}
	
	@Test(enabled = ENABLED, dependsOnMethods = {"createWidget"})
	public void updateWidget()
	{
		WIDGET.setModel("m2");
		WIDGET.setSql("s2");
		WIDGET.setTitle("t2");
        WIDGET.setType("wt2");
		
		widgetMapper.updateWidget(WIDGET);

		checkWidget(widgetMapper.getWidgetById(WIDGET.getId()));
	}
	
	@Test(enabled = ENABLED, dependsOnMethods = {"createWidget", "getWidgetById", "getAllWidgets", "updateWidget"})
	public void deleteWidgetById()
	{
		widgetMapper.deleteWidgetById((WIDGET.getId()));
		assertNull(widgetMapper.getWidgetById(WIDGET.getId()));
	}
	
	private void checkWidget(Widget widget)
	{
		assertEquals(widget.getTitle(), WIDGET.getTitle(), "Widget title must match");
		assertEquals(widget.getModel(), WIDGET.getModel(), "Widget model match");
		assertEquals(widget.getSql(), WIDGET.getSql(), "Widget sql must match");
        assertEquals(widget.getType(), WIDGET.getType(), "Widget type must match");
	}
}
