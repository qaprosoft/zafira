/*******************************************************************************
 * Copyright 2013-2018 QaProSoft (http://www.qaprosoft.com).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
package com.qaprosoft.zafira.dbaccess.dao;

import com.qaprosoft.zafira.dbaccess.dao.mysql.application.MonitorMapper;
import com.qaprosoft.zafira.dbaccess.utils.KeyGenerator;
import com.qaprosoft.zafira.models.db.Monitor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.testng.AbstractTestNGSpringContextTests;
import org.testng.Assert;
import org.testng.annotations.Test;
import java.util.List;
import static org.testng.Assert.*;

/**
 * @author Kirill Bugrim
 *
 * @version 1.0
 */

@Test
@ContextConfiguration("classpath:com/qaprosoft/zafira/dbaccess/dbaccess-test.xml")
public class MonitorMapperTest extends AbstractTestNGSpringContextTests {

    @Autowired
    private MonitorMapper monitorMapper;

    /**
     * Turn this on to enable this test
     */
    private static final boolean ENABLED = false;

    private static final Monitor MONITOR = new Monitor() {
		private static final long serialVersionUID = 1L;
		{
            setName("n1" + KeyGenerator.getKey());
            setUrl("https://www.onliner.by/");
            setExpectedCode(KeyGenerator.getKey());
            setHttpMethod(HttpMethod.GET);
            setCronExpression("0 * * ? * *");
            setRecipients("e.jhon@gmail.com");
            setRequestBody("{'k':'v'}");
            setNotificationsEnabled(true);
            setType(Type.HTTP);
        }
    };


    @Test(enabled = ENABLED)
    public void createMonitor() {
        monitorMapper.createMonitor(MONITOR);
        assertNotEquals(MONITOR.getId(), 0, "Monitor ID must be set up by autogenerated keys");
    }


    @Test(enabled = ENABLED, dependsOnMethods = {"createMonitor"})
    public void getMonitorsCount()
    {
        Integer count = monitorMapper.getMonitorsCount();
        Assert.assertNotNull(count, "");
    }

    @Test(enabled = ENABLED, dependsOnMethods = {"getMonitorsCount"})
    public void getMonitorByMonitorName() {
        checkMonitor(monitorMapper.getMonitorByMonitorName(MONITOR.getName()));
    }


    @Test(enabled = ENABLED, dependsOnMethods = {"getMonitorByMonitorName"})
    public void getMonitorById() {
        checkMonitor(monitorMapper.getMonitorById(MONITOR.getId()));
    }


    @Test(enabled = ENABLED, dependsOnMethods = { "getMonitorById" })
    public void updateMonitor()
    {
        MONITOR.setName("n1" + KeyGenerator.getKey());
        MONITOR.setUrl("https://mail.google.com/");
        MONITOR.setExpectedCode(KeyGenerator.getKey());
        MONITOR.setHttpMethod(Monitor.HttpMethod.POST);
        MONITOR.setCronExpression("0 */3 * ? * *");
        MONITOR.setRecipients("paul@gmail.com");
        MONITOR.setRequestBody("{'kkk':'vvvv'}");
        MONITOR.setNotificationsEnabled(false);
        MONITOR.setType(Monitor.Type.PING);
        monitorMapper.updateMonitor(MONITOR);
        checkMonitor(monitorMapper.getMonitorById(MONITOR.getId()));
    }


    @Test(enabled = ENABLED, dependsOnMethods = {"updateMonitor"})
    public void getAllMonitors()
    {
        List<Monitor> monitorList = monitorMapper.getAllMonitors();
        checkMonitor(monitorList.get(monitorList.size() - 1));
    }


    /**
     * If true, then <code>deleteMonitor</code> will be used to delete monitor after all tests, otherwise -
     * <code>deleteMonitorById</code>
     */
    private static final boolean DELETE_MONITOR = true;

    @Test(enabled = ENABLED  && !DELETE_MONITOR,
            dependsOnMethods = {"createMonitor","getMonitorByMonitorName","getMonitorById","updateMonitor","getAllMonitors"})
    public void deleteMonitorById() {
        monitorMapper.deleteMonitorById(MONITOR.getId());
        assertNull(monitorMapper.getMonitorById(MONITOR.getId()));
    }


    @Test(enabled = ENABLED  && DELETE_MONITOR,
            dependsOnMethods = {"createMonitor","getMonitorByMonitorName","getMonitorById","updateMonitor","getAllMonitors"})
    public void deleteMonitor() {
        monitorMapper.deleteMonitor(MONITOR);
        assertNull(monitorMapper.getMonitorById(MONITOR.getId()));
    }

    private void checkMonitor(Monitor monitor) {
        assertEquals(monitor.getName(), MONITOR.getName(), "Name must match");
        assertEquals(monitor.getUrl(), MONITOR.getUrl(), "URL must match");
        assertEquals(monitor.getCronExpression(), MONITOR.getCronExpression(), "Cron expression must match");
        assertEquals(monitor.getRecipients(), MONITOR.getRecipients(), "Emails must match");
        assertEquals(monitor.getExpectedCode(), MONITOR.getExpectedCode(), "Expected response status must match");
        assertEquals(monitor.getRequestBody(), MONITOR.getRequestBody(), "Request body must match");
        assertEquals(monitor.getType(), MONITOR.getType(), "Type must match");
        assertEquals(monitor.isNotificationsEnabled(), MONITOR.isNotificationsEnabled(), "Enable notification must match");
        assertEquals(monitor.getHttpMethod(), MONITOR.getHttpMethod(), "HTTP method must match");
    }

}
