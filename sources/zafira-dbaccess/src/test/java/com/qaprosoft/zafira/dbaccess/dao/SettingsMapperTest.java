/*******************************************************************************
 * Copyright 2013-2018 QaProSoft (http://www.qaprosoft.com).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
package com.qaprosoft.zafira.dbaccess.dao;

import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertNotEquals;
import static org.testng.Assert.assertNull;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.testng.AbstractTestNGSpringContextTests;
import org.testng.annotations.Test;

import com.qaprosoft.zafira.dbaccess.dao.mysql.application.SettingsMapper;
import com.qaprosoft.zafira.models.db.Setting;

@Test
@ContextConfiguration("classpath:com/qaprosoft/zafira/dbaccess/dbaccess-test.xml")
public class SettingsMapperTest extends AbstractTestNGSpringContextTests
{
	private static final boolean ENABLED = false;

	private static final Setting SETTING1 = new Setting()
	{
		private static final long serialVersionUID = 1L;
		{
			setName("radius");
			setValue("500");
		}
	};
	private static final Setting SETTING2 = new Setting()
	{
		private static final long serialVersionUID = 1L;
		{
			setName("min.balance");
			setValue("200");
		}
	};

	@Autowired
	private SettingsMapper settingsMapper;

	@Test(enabled = ENABLED)
	public void createSettings()
	{
		settingsMapper.createSetting(SETTING1);
		settingsMapper.createSetting(SETTING2);

		assertNotEquals(SETTING1.getId(), 0, "Setting ID must be set up by autogenerated keys");
		assertNotEquals(SETTING2.getId(), 0, "Setting ID must be set up by autogenerated keys");
	}

	@Test(enabled = ENABLED, dependsOnMethods =
	{ "createSettings" })
	public void getSettingById()
	{
		checkSetting(settingsMapper.getSettingById(SETTING1.getId()));
	}

	@Test(enabled = ENABLED, dependsOnMethods =
	{ "createSettings" })
	public void getSettingByName()
	{
		checkSetting(settingsMapper.getSettingByName(SETTING1.getName()));
	}

	@Test(enabled = ENABLED, dependsOnMethods =
	{ "createSettings" })
	public void updateSetting()
	{
		SETTING1.setName("speed");
		SETTING1.setValue("20");

		settingsMapper.updateSetting(SETTING1);

		checkSetting(settingsMapper.getSettingById(SETTING1.getId()));
	}

	/**
	 * Turn this in to delete car after all tests
	 */
	private static final boolean DELETE_ENABLED = true;
	/**
	 * If true, then <code>deleteSetting</code> will be used to delete sms confirmations after all tests, otherwise -
	 * <code>deleteSettingById</code>
	 */
	private static final boolean DELETE_BY_SETTING = false;

	@Test(enabled = ENABLED && DELETE_ENABLED && DELETE_BY_SETTING, dependsOnMethods =
	{
			"createSettings", "getSettingById", "getSettingByName", "updateSetting"
	})
	public void deleteSetting()
	{
		settingsMapper.deleteSetting(SETTING1);

		assertNull(settingsMapper.getSettingById(SETTING1.getId()));
	}

	@Test(enabled = ENABLED && DELETE_ENABLED && !DELETE_BY_SETTING, dependsOnMethods =
	{ "createSettings", "getSettingById", "getSettingByName", "updateSetting" })
	public void deleteSettingById()
	{
		settingsMapper.deleteSettingById(SETTING1.getId());

		assertNull(settingsMapper.getSettingById(SETTING1.getId()));
	}

	private void checkSetting(Setting setting)
	{
		assertEquals(setting.getName(), SETTING1.getName(), "Name must match");
		assertEquals(setting.getValue(), SETTING1.getValue(), "Value must match");
	}
}
