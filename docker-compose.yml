version: "3.7"

services:

  reverse-proxy:
    image: "nginx:${TAG_NGINX}"
    volumes:
    - "./configuration/reverse-proxy/nginx.conf:/etc/nginx/nginx.conf:ro"
    ports:
    - "80:80"     # primary HTTP port
    - "5672:5672" # log collection port
    #- "8081:8081" # RabbitMQ administration, optional
    #- "5432:5432" # database administration, optional
    #- "6379:6379" # Redis administration, optional
    restart: always

  postgres:
    image: "qaprosoft/postgres:${TAG_POSTGRES}"
    volumes:
      - "./runtime/pgdata:/var/lib/postgresql/data"
      - "./database/:/docker-entrypoint-initdb.d"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    restart: always
  rabbitmq:
    image: "qaprosoft/rabbitmq:${TAG_RABBITMQ}"
    volumes:
      - "./configuration/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro"
    environment:
      - RABBITMQ_DEFAULT_USER=qpsdemo
      - RABBITMQ_DEFAULT_PASS=qpsdemo
    restart: always

  redis:
    image: "redis:${TAG_REDIS}"
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    volumes:
      - "./configuration/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro"
    restart: always

  elasticsearch:
    image: "docker.elastic.co/elasticsearch/elasticsearch:${TAG_ELASTICSEARCH}"
    volumes:
      - "./runtime/esdata:/usr/share/elasticsearch/data"
      - "./configuration/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro"
    environment:
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    restart: always

  logstash:
    image: "docker.elastic.co/logstash/logstash:${TAG_LOGSTASH}"
    depends_on:
      - elasticsearch
    volumes:
      - "./configuration/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro"
      - "./configuration/logstash/mapping.json:/mapping.json:ro"
    restart: always

  reporting-service:
    image: "zebrunner/reporting-service:${TAG_REPORTING_SERVICE}"
    depends_on:
      - postgres
      - rabbitmq
      - redis
    volumes:
      - "./runtime/assets:/opt/assets"
    env_file:
      - configuration/reporting-service/variables.env
    restart: always

  reporting-ui:
    image: "zebrunner/reporting-ui:${TAG_REPORTING_UI}"
    depends_on:
      - reporting-service
    env_file:
      - configuration/reporting-ui/variables.env
    restart: always
