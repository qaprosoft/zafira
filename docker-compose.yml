version: "3.7"
networks:
  default:
    external:
      name: infra
services:
  zebrunner-proxy:
    image: "nginx:${TAG_NGINX}"
    container_name: zebrunner-proxy
    volumes:
    - "./configuration/zebrunner-proxy/nginx.conf:/etc/nginx/nginx.conf:ro"
    ports:
    - "80:80"     # primary HTTP port
    - "5672:5672" # log collection port
    #- "8081:8081" # RabbitMQ administration, optional
    #- "5432:5432" # database administration, optional
    #- "6379:6379" # Redis administration, optional
    depends_on:
      - reporting-ui
      - reporting-service
    restart: always
  postgres:
    image: "qaprosoft/postgres:${TAG_POSTGRES}"
    container_name: postgres
    volumes:
      - "pgdata-volume:/var/lib/postgresql/data"
      - "./database/:/docker-entrypoint-initdb.d"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    restart: always
  rabbitmq:
    image: "qaprosoft/rabbitmq:${TAG_RABBITMQ}"
    container_name: rabbitmq
    volumes:
      - "./configuration/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro"
    environment:
      - RABBITMQ_DEFAULT_USER=qpsdemo
      - RABBITMQ_DEFAULT_PASS=qpsdemo
    restart: always
  redis:
    image: "redis:${TAG_REDIS}"
    container_name: redis
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    volumes:
      - "./configuration/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro"
    restart: always
  elasticsearch:
    image: "docker.elastic.co/elasticsearch/elasticsearch:${TAG_ELASTICSEARCH}"
    container_name: elasticsearch
    volumes:
      - "esdata-volume:/usr/share/elasticsearch/data"
      - "./configuration/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro"
    environment:
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    restart: always
  logstash:
    image: "docker.elastic.co/logstash/logstash:${TAG_LOGSTASH}"
    container_name: logstash
    volumes:
      - "./configuration/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro"
      - "./configuration/logstash/mapping.json:/mapping.json:ro"
      - "./configuration/logstash/test-run-data-template.json:/test-run-data-template.json:ro"
    depends_on:
      - elasticsearch
    restart: always
  reporting-service:
    image: "zebrunner/reporting-service:${TAG_REPORTING_SERVICE}"
    container_name: reporting-service
    volumes:
      - "assets-data:/opt/assets"
    env_file:
      - configuration/reporting-service/variables.env
    depends_on:
      - postgres
      - rabbitmq
      - redis
      - minio
    restart: always
  artifacts-proxy-service:
    image: "zebrunner/artifacts-proxy-service:${TAG_ARTIFACTS_PROXY_SERVICE}"
    container_name: artifacts-proxy-service
    env_file:
      - configuration/artifacts-proxy-service/variables.env
    depends_on:
      - rabbitmq
    restart: always
  mail-service:
    image: "zebrunner/mail-service:${TAG_MAIL_SERVICE}"
    container_name: mail-service
    env_file:
      - configuration/mail-service/variables.env
    depends_on:
      - postgres
      - rabbitmq
      - minio
    restart: always
  minio:
    image: "minio/minio:${TAG_MINIO}"
    container_name: minio
    volumes:
      - "miniodata-volume:/data"
    command: server /data
    environment:
      - MINIO_ACCESS_KEY=changeit
      - MINIO_SECRET_KEY=changeit
    restart: always
  minio-mc:
    image: "minio/mc:${TAG_MINIO_MC}"
    container_name: minio-mc
    depends_on:
      - minio
    volumes:
      - "./configuration/minio/data:/artifacts:ro"
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add minio-host http://minio:9000 changeit changeit --api s3v4;
      /usr/bin/mc mb --ignore-existing minio-host/artifacts;
      /usr/bin/mc policy set download minio-host/artifacts;
      /usr/bin/mc mirror -w --overwrite artifacts minio-host/artifacts;
      exit 0;
      "
  reporting-ui:
    image: "zebrunner/reporting-ui:${TAG_REPORTING_UI}"
    container_name: reporting-ui
    environment:
      - SERVER_URL=http://localhost:80/reporting-service
    depends_on:
      - reporting-service
    restart: always
volumes:
  pgdata-volume:
  esdata-volume:
  assets-data:
  miniodata-volume:
